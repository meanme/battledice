// Generated by CoffeeScript 1.3.3
(function() {
  var Schema, User, UserSchema, bcrypt, mongoose;

  mongoose = require('mongoose');

  bcrypt = require('bcrypt');

  Schema = mongoose.Schema;

  UserSchema = new Schema({
    name: {
      type: String,
      required: true
    },
    email: {
      type: String,
      required: true
    },
    username: {
      type: String,
      required: true,
      unique: true
    },
    provider: {
      type: String
    },
    password: {
      type: String
    },
    created: {
      type: Date,
      "default": Date.now
    },
    salt: {
      type: String
    },
    facebook: {},
    google: {}
  });

  UserSchema.pre('save', function(next) {
    var SALT_WORK_FACTOR, user;
    user = this;
    SALT_WORK_FACTOR = 10;
    if (!user.isModified('password')) {
      return next();
    }
    if (!user.isModified('password')) {
      return next();
    }
    return bcrypt.genSalt(SALT_WORK_FACTOR, function(err, salt) {
      if (err) {
        return next(err);
      }
      bcrypt.hash(user.password, salt, function(err, hash) {
        if (err) {
          return next(err);
        }
        user.password = hash;
        next();
      });
    });
  });

  UserSchema.methods.comparePassword = function(candidatePassword, cb) {
    return bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
      if (err) {
        return cb(err);
      }
      return cb(null, isMatch);
    });
  };

  UserSchema.statics = {
    list: function(cb) {
      this.find().sort({
        username: 1
      }).exec(cb);
    }
  };

  User = mongoose.model('User', UserSchema);

}).call(this);
