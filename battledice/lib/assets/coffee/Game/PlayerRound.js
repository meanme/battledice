// Generated by CoffeeScript 1.3.3

/*
User: mmarinucci
Copyright Â© mename 2014 All rights reserved
PlayerRound
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['./../Game/Round'], function() {
    var PlayerRound, root;
    PlayerRound = (function(_super) {

      __extends(PlayerRound, _super);

      function PlayerRound() {
        this.resolve = __bind(this.resolve, this);
        PlayerRound.__super__.constructor.apply(this, arguments);
      }

      PlayerRound.prototype.selectHero = function() {
        console.log('PlayerRound - should select hero (timer)');
        return PlayerRound.__super__.selectHero.call(this);
      };

      PlayerRound.prototype.heroSelectPhase = function() {
        this.match.phaseCompleted(this);
        return PlayerRound.__super__.heroSelectPhase.call(this);
      };

      PlayerRound.prototype.holdPhase = function() {
        console.log('hold phase - player');
        return PlayerRound.__super__.holdPhase.call(this);
      };

      PlayerRound.prototype.rollPhase = function() {
        var nextRoll;
        console.log('enable roll phase = player');
        nextRoll = new Event('round.rollPhase');
        window.dispatchEvent(nextRoll);
        window.addEventListener('round.nextRoll', this.nextRoll, false);
        window.addEventListener('round.resolve', this.resolve, false);
        this.nextRoll();
        return PlayerRound.__super__.rollPhase.call(this);
      };

      PlayerRound.prototype.resolve = function(event) {
        if (event == null) {
          event = null;
        }
        console.log('resolve data');
        console.log(event);
        this.roll = event.data;
        window.removeEventListener('round.nextRoll', this.nextRoll, false);
        window.removeEventListener('round.resolve', this.resolve, false);
        return this.match.phaseCompleted(this);
      };

      PlayerRound.prototype.resolvePhase = function() {
        var result,
          _this = this;
        console.log('resolve phase - show player damage');
        result = this.match.roundResult();
        $(".roundLabel").text("Round " + (result.roundNumber + 1));
        $(".roundDescription").text(result.summary);
        $('.roundOutcome').html(result.outcome);
        $('#roundResults > .roundOutcome').click(function() {
          $('#roundResults > .roundOutcome').unbind();
          return $('#roundResults').fadeOut(500, function() {
            return _this.match.phaseCompleted(_this);
          });
        });
        $('#roundResults').fadeIn('slow');
        return PlayerRound.__super__.resolvePhase.call(this);
      };

      return PlayerRound;

    })(Round);
    root = typeof exports !== "undefined" && exports !== null ? exports : window;
    return root.PlayerRound = PlayerRound;
  });

}).call(this);
