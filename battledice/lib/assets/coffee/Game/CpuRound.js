// Generated by CoffeeScript 1.3.3

/*
User: mmarinucci
Copyright Â© mename 2013 All rights reserved
CpuRound
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['./../Game/Round'], function() {
    var CpuRound, root;
    CpuRound = (function(_super) {

      __extends(CpuRound, _super);

      function CpuRound() {
        this.selectHero = __bind(this.selectHero, this);
        CpuRound.__super__.constructor.apply(this, arguments);
      }

      CpuRound.prototype.selectHero = function() {
        console.log('cpu needs to select hero');
        return CpuRound.__super__.selectHero.call(this);
      };

      CpuRound.prototype.holdPhase = function() {
        return CpuRound.__super__.holdPhase.call(this);
      };

      CpuRound.prototype.heroSelectPhase = function() {
        this.match.phaseCompleted(this);
        return CpuRound.__super__.heroSelectPhase.call(this);
      };

      CpuRound.prototype.rollPhase = function() {
        var die, i, _i, _ref;
        for (i = _i = 0, _ref = Round.DICE; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          die = Math.floor(Math.random() * Round.DIE.length);
          this.roll.push(Round.DIE[die]);
        }
        console.log(this.roll);
        this.match.phaseCompleted(this);
        return CpuRound.__super__.rollPhase.call(this);
      };

      CpuRound.prototype.resolvePhase = function() {
        var cpuRoll;
        console.log('resolve phase - cpu');
        cpuRoll = new Event('round.cpuRoll');
        cpuRoll.data = this.roll;
        window.dispatchEvent(cpuRoll);
        this.match.phaseCompleted(this);
        return CpuRound.__super__.resolvePhase.call(this);
      };

      return CpuRound;

    })(Round);
    root = typeof exports !== "undefined" && exports !== null ? exports : window;
    return root.CpuRound = CpuRound;
  });

}).call(this);
