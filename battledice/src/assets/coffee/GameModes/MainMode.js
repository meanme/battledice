// Generated by CoffeeScript 1.3.3

/*
User: mmarinucci
Copyright Â© mename 2013 All rights reserved
MainMode
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['./../Core/GameMode'], function() {
    var MainMode, root;
    MainMode = (function(_super) {

      __extends(MainMode, _super);

      function MainMode() {
        this.update = __bind(this.update, this);

        this.heroSelectionChange = __bind(this.heroSelectionChange, this);
        MainMode.__super__.constructor.apply(this, arguments);
      }

      MainMode.prototype.setUp = function() {
        MainMode.__super__.setUp.call(this);
        document.addEventListener("touchmove", (function(e) {
          return e.preventDefault();
        }), false);
        $('#playBtn').click(function() {
          return GameManager.instance.pushGameMode(new MatchMode());
        });
        $('#testResults').click(function() {
          return GameManager.instance.pushGameMode(new ResultsMode());
        });
        $("#main-mode").css('display', 'block');
        $('.heroProfile > input:checkbox').click(this.heroSelectionChange);
        return this.setupHeroes();
      };

      MainMode.prototype.cleanUp = function() {
        document.removeEventListener("touchmove", (function(e) {
          return e.preventDefault();
        }), false);
        $("#main-mode").css('display', 'none');
        $('#playBtn').unbind('click');
        $('#testResults').unbind('click');
        $('.heroPreviewLocked').removeClass('heroPreviewLocked');
        return MainMode.__super__.cleanUp.call(this);
      };

      MainMode.prototype.heroSelectionChange = function(event) {
        event.preventDefault();
        return console.log(event.target.id);
      };

      MainMode.prototype.setupHeroes = function() {
        var heroId, heroProfile, playerHero, _i, _len, _ref, _results;
        _ref = $(".heroProfile");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          heroProfile = _ref[_i];
          heroId = $(heroProfile).find('input:hidden').val();
          playerHero = Player.instance.getHero(heroId);
          if (playerHero != null) {
            $(heroProfile).find('.heroLevel').text(playerHero.level);
            if ($.inArray(heroId, Player.instance.activeSet > -1)) {
              _results.push($(heroProfile).find('input:checkbox').attr('checked', true));
            } else {
              _results.push($(heroProfile).find('input:checkbox').attr('checked', false));
            }
          } else {
            _results.push($(heroProfile).addClass('heroPreviewLocked'));
          }
        }
        return _results;
      };

      MainMode.prototype.setupActiveSet = function() {
        return console.log('main mode - setup active set');
      };

      MainMode.prototype.update = function(time) {};

      return MainMode;

    })(GameMode);
    root = typeof exports !== "undefined" && exports !== null ? exports : window;
    return root.MainMode = MainMode;
  });

}).call(this);
