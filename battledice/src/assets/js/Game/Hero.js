// Generated by CoffeeScript 1.3.3

/*
User: mmarinucci
Copyright Â© mename 2013 All rights reserved
Hero
*/


(function() {
  var Hero, root;

  Hero = (function() {

    function Hero(data) {
      this.data = data;
      console.log(this.data);
      this.atk = this.data.atk;
      this.skills = this.data.skills;
      this.name = this.data.name;
      this.picture = this.data.picture;
      this.atk = this.data.atk;
    }

    Hero.prototype.activateSkill = function(level, roll) {
      var activationCount, i, result, _i;
      result = new Array();
      if (this.skills[level] != null) {
        activationCount = this.canAfford(this.skills[level].cost, roll);
        for (i = _i = 0; 0 <= activationCount ? _i < activationCount : _i > activationCount; i = 0 <= activationCount ? ++_i : --_i) {
          result.push(this.skills[level].effect);
        }
      }
      return result;
    };

    Hero.prototype.setupDom = function(element) {
      var costIcon, skill, skillCost, skillCostGroup, skillDom, skillsDom, _i, _j, _len, _len1, _ref, _ref1, _results;
      $(element).css('display', 'block');
      $(element).find('.name').text(this.name);
      $(element).find('.picture').attr('src', this.picture);
      $(element).find('.atk').text("Atk: " + this.atk);
      skillsDom = $(element).find('ul');
      _ref = this.skills;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        skill = _ref[_i];
        skillDom = $('<li/>').addClass('skillEntry');
        skillCostGroup = $('<div></div>').addClass('skillCost');
        _ref1 = skill.cost;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          skillCost = _ref1[_j];
          costIcon = $('<img>').addClass('diceRoll');
          costIcon.addClass("roll-" + skillCost);
          skillCostGroup.append(costIcon);
        }
        skillDom.append(skillCostGroup);
        skillDom.append($('<div></div>').addClass('skillEffect').text(skill.effect));
        _results.push(skillsDom.append(skillDom));
      }
      return _results;
    };

    Hero.prototype.cleanupDom = function(element) {
      $(element).css('display', 'block');
      $(element).css('display', 'hidden');
      return $(element).find('ul').empty();
    };

    Hero.prototype.canAfford = function(cost, rollSource) {
      var costDie, costIndex, match, result, roll, _i, _len;
      roll = rollSource.slice(0);
      result = 0;
      match = true;
      while (match) {
        for (_i = 0, _len = cost.length; _i < _len; _i++) {
          costDie = cost[_i];
          costIndex = roll.lastIndexOf(costDie);
          if (costIndex !== -1) {
            roll.splice(costIndex, 1);
          } else {
            match = false;
            break;
          }
        }
        if (match) {
          result++;
        }
      }
      return result;
    };

    return Hero;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Hero = Hero;

}).call(this);
