// Generated by CoffeeScript 1.3.3

/*
User: mmarinucci
Copyright Â© mename 2013 All rights reserved
MatchMode
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['./../Core/GameMode'], function() {
    var MatchMode, root;
    MatchMode = (function(_super) {

      __extends(MatchMode, _super);

      function MatchMode() {
        this.update = __bind(this.update, this);

        this.roundReady = __bind(this.roundReady, this);

        this.checkReady = __bind(this.checkReady, this);

        this.rollDice = __bind(this.rollDice, this);

        this.enableRoll = __bind(this.enableRoll, this);

        this.roundReset = __bind(this.roundReset, this);

        this.enemyRoll = __bind(this.enemyRoll, this);
        this.match = new Match(window['heroesCatalog']);
      }

      MatchMode.prototype.setUp = function() {
        MatchMode.__super__.setUp.apply(this, arguments);
        $("#match-mode").css('display', 'block');
        this.match.hero0.setupDom($("#hero0")[0]);
        this.match.hero1.setupDom($("#hero1")[0]);
        $("#diceContainer").empty();
        window.addEventListener('round.roll', this.rollDice, false);
        window.addEventListener('round.ready', this.roundReady, false);
        window.addEventListener('round.rollPhase', this.enableRoll, false);
        window.addEventListener('round.reset', this.roundReset, false);
        window.addEventListener('round.cpuRoll', this.enemyRoll, false);
        this.isReady = false;
        return this.match.nextRound();
      };

      MatchMode.prototype.enemyRoll = function(event) {
        var diceContainer, diceRoll, die, dieDom, _i, _len;
        diceRoll = event.data;
        diceContainer = $("#enemyContainer");
        diceContainer.empty();
        for (_i = 0, _len = diceRoll.length; _i < _len; _i++) {
          die = diceRoll[_i];
          console.log('die ' + die);
          dieDom = $('<button>').addClass('diceRoll');
          dieDom.addClass("roll-" + die).attr('die', die);
          dieDom.attr('disabled', 'disabled');
          diceContainer.append(dieDom);
        }
        return $('#enemyRoll').fadeIn('slow');
      };

      MatchMode.prototype.roundReset = function() {
        window.addEventListener('round.rollPhase', this.enableRoll, false);
        window.addEventListener('round.ready', this.roundReady, false);
        $("#diceContainer").empty();
        $("#enemyRoll").css('display', 'none');
        $("#reRoll").unbind('click');
        $('#reRoll').text('Roll Again');
        return $("#reRoll").removeClass('pure-button-disabled');
      };

      MatchMode.prototype.enableRoll = function() {
        var _this = this;
        $("#reRoll").unbind('click');
        $("#reRoll").click(function() {
          return _this.moveNext();
        });
        return window.removeEventListener('round.rollPhase', this.enableRoll, false);
      };

      MatchMode.prototype.moveNext = function() {
        var nextRoll;
        if (this.match.currentRound.canReroll() && !this.isReady) {
          nextRoll = new Event('round.nextRoll');
          return window.dispatchEvent(nextRoll);
        } else {
          return this.readyAccept();
        }
      };

      MatchMode.prototype.readyAccept = function() {
        var diceContainer, die, finalRoll, resolveEvent, _i, _len, _ref;
        $("#reRoll").addClass('pure-button-disabled');
        $("#reRoll").unbind('click');
        diceContainer = $("#diceContainer");
        finalRoll = new Array();
        _ref = diceContainer.children('.diceRoll');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          die = _ref[_i];
          finalRoll.push($(die).attr('die'));
        }
        resolveEvent = new Event('round.resolve');
        resolveEvent.data = finalRoll;
        return window.dispatchEvent(resolveEvent);
      };

      MatchMode.prototype.rollDice = function() {
        var diceContainer, i, previousRoll, _i, _ref, _results,
          _this = this;
        diceContainer = $("#diceContainer");
        previousRoll = diceContainer.children('.diceRoll');
        _results = [];
        for (i = _i = 0, _ref = this.match.currentRound.hold.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (!this.match.currentRound.hold[i]) {
            _results.push(setTimeout((function(index) {
              return function() {
                var currentRound, die, dieFace, previousRollDie, rollValue, _j, _len, _ref1;
                previousRollDie = previousRoll[index];
                currentRound = _this.match.currentRound;
                die = Math.floor(Math.random() * Round.DIE.length);
                rollValue = Round.DIE[die];
                if (previousRollDie != null) {
                  _ref1 = Round.DIE;
                  for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
                    dieFace = _ref1[_j];
                    $(previousRollDie).removeClass("roll-" + dieFace);
                  }
                  return $(previousRollDie).addClass("roll-" + rollValue).attr('die', rollValue);
                } else {
                  die = $('<button>').addClass('diceRoll');
                  die.addClass("roll-" + rollValue).attr('die', rollValue);
                  die.click(function(event) {
                    $(event.target).toggleClass("holdDice");
                    currentRound.hold[index] = !currentRound.hold[index];
                    return _this.checkReady();
                  });
                  return diceContainer.append(die);
                }
              };
            })(i), i * 200));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      MatchMode.prototype.checkReady = function() {
        this.isReady = $('.holdDice').length === $('#diceContainer > .diceRoll').length || !this.match.currentRound.canReroll();
        if (this.isReady) {
          return $("#reRoll").text('Ready');
        } else {
          return $('#reRoll').text('Roll Again');
        }
      };

      MatchMode.prototype.roundReady = function() {
        window.removeEventListener('round.ready', this.roundReady, false);
        return $("#reRoll").text('Ready');
        /*$("#reRoll").unbind 'click'
        
        $("#reRoll").click () =>
            @readyAccept()
        */

      };

      MatchMode.prototype.cleanUp = function() {
        MatchMode.__super__.cleanUp.apply(this, arguments);
        window.removeEventListener('round.roll', this.rollDice, false);
        $("#match-mode").css('display', 'none');
        $("#diceContainer").empty();
        $("#reRoll").removeClass('pure-button-disabled');
        this.match.hero0.cleanupDom($("#hero0")[0]);
        return this.match.hero1.cleanupDom($("#hero1")[0]);
      };

      MatchMode.prototype.update = function(time) {};

      return MatchMode;

    })(GameMode);
    root = typeof exports !== "undefined" && exports !== null ? exports : window;
    return root.MatchMode = MatchMode;
  });

}).call(this);
